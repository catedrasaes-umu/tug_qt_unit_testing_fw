
* Paso 3: Ejecutar la TestSuite

** ¿Qué alternativas de ejecución tenemos?

Las testsuites son clases C++ que heredan de ~QObject~. Éstas deben
ser ejecutadas dentro de una aplicación Qt, o lo que es lo
mismo, en un entorno en el que tengamos un objeto ~QApplication~. 

La primera alternativa que tenemos es la más sencilla, y consiste en
ejecutar una testsuite de forma aislada creando un objeto de
aplicación temporal. Esta forma de lanzar una testsuite se denomina
/standalone/ y puede realizarse de forma muy sencilla utilizando el
método estático ~TestSuiteBase::launch_standalone(testsuite)~.

La segunda alternativa consiste en ejecutar una bateria de testsuites
agregadas en un ejecutor único. Este objeto ejecutor se llama
~TestSuiteRunner~ y lo explicamos a continuación.

** Descripción de la clase TestSuiteRunner

~TestSuiteRunner~ consiste en una clase en la que podemos agregar
varias testsuites mediante el método ~add_testsuite(TestSuiteBase*
tsb)~ y luego lanzarlas todas a la vez usando el método
~run_testsuites()~.

Existen una serie de opciones de ejecución (explicadas más abajo) que
se aplicarán a todas las testsuites ejecutadas. Además, toda la salida
resultante de la ejecución de las diferentes testsuites irá a un mismo
fichero (en caso de que se active la salida a fichero, como se
explicará más adelante).


*** Funcionalidad básica

///
    /// Adds a new testsuite to the list
    void add_testsuite(TestSuiteBase* tsb);

    ///
    /// Launches the execution of all stored testsuites
    int run_testsuites();

    ///
    /// Resets the runner
    void clean();

*** Opciones disponibles

///
    /// Provides arguments to the test execution
    inline TestSuiteRunner& set_arguments(int argc, char *argv[])

///
    /// Enables recovery after a segfault
    inline TestSuiteRunner& handle_segfault()

///
    /// Pauses between the execution of two testsuites
    inline TestSuiteRunner& pause_between(int ms){



** Gestión de los resultados (salida) originados por los tests



** Ejecución de una testsuite (Ejemplo práctico)

int main(int argc, char *argv[])
{
    
// configure output
    t_OUTPUT_VERBOSE();
    t_RESULTS_TO_XML("/tmp/test.xml");


    /*for(int i=0; i < argc; i++){
        std::cout << i << " " << argv[i] << std::endl;
    }
    sleep(5);*/


    // option 0: /// Alternative 0: Use TestSuiteRunner
    // option 1: /// Alternative 1: Use TestSuiteBase launch method
    // option 2: /// Alternative 2: Create our own QApplication object
    // option 3: /// Launch stand-alone application (no testing)
    int option = 0;

    if (option == 0)
    {
        // 1. create a TestSuiteRunner
        QApplication qapp(argc,argv);
        TestSuiteRunner trunner(&qapp);

        // 2. add new testsuites to the runner
        testsuite_PlotCenterPanel_manypanels_full_ranges ts_m_full_ranges;
        //trunner.add_testsuite(&ts_m_full_ranges);
        testsuite_PlotCenterPanel_manypanels_random_values ts_m_random_values;
        //trunner.add_testsuite(&ts_m_random_values);
        testsuite_PlotCenterPanel_manypanels_buttons ts_m_buttons;
        trunner.add_testsuite(&ts_m_buttons);
        testsuite_PlotCenterPanel_manypanels_segfault ts_m_segfault;
        trunner.add_testsuite(&ts_m_segfault);
        trunner.add_testsuite(&ts_m_buttons);
        testsuite_PlotCenterPanel_manypanels_assert ts_m_assert;
        //trunner.add_testsuite(&ts_m_assert);

        // 3. run testsuites
        return trunner.handle_segfault().pause_between(3000).run_testsuites();
    
}


